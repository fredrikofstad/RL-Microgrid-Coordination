import numpy as np
from src.modules.module import Module

class WindTurbine(Module):
    def __init__(self, amount, cutin_windspeed, cutoff_windspeed, rated_windspeed, unit_operational_cost_wind,
                 density_of_air, radius_wind_turbine_blade, average_wind_speed, power_coefficient,
                 gearbox_transmission_efficiency, electrical_generator_efficiency, delta_t=1):
        super().__init__()
        self.amount = amount
        self.cutin_windspeed = cutin_windspeed   # (m/s)
        self.cutoff_windspeed = cutoff_windspeed  # (m/s), v^co#
        self.rated_windspeed = rated_windspeed   # (m/s), v^r#
        self.unit_operational_cost_wind = unit_operational_cost_wind
        self.delta_t = delta_t

        # Energy (kWh) = 0.5 x A x Cp x ρ x V^3
        swept_area = np.pi * (radius_wind_turbine_blade**2)
        self.rated_power_wind_turbine = (0.5 * swept_area
                                         * power_coefficient
                                         * gearbox_transmission_efficiency
                                         * electrical_generator_efficiency
                                         * density_of_air
                                         * average_wind_speed ** 3)

    def set_cond(self, value, wind_speed):
        if wind_speed > self.cutoff_windspeed or wind_speed < self.cutin_windspeed:
            self.set(0)
        else:
            self.set(value)

    def energy_generated(self, wind_speed):
        # calculate the energy generated by the wind turbine , e_t^w#
        # divide by 1000 to get kW/h
        if not self.working_status:
            return 0
        elif self.rated_windspeed > wind_speed >= self.cutin_windspeed:
            return ((self.amount * self.rated_power_wind_turbine *
                    (wind_speed - self.cutin_windspeed) / (self.rated_windspeed - self.cutin_windspeed))/1000)

        elif self.cutoff_windspeed > wind_speed >= self.rated_windspeed:
            return self.amount * self.rated_power_wind_turbine * self.delta_t / 1000
        else:
            return 0

    def operational_cost(self, wind_speed):
        return self.energy_generated(wind_speed) * self.unit_operational_cost_wind

